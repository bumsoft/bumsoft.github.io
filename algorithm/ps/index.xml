<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>PS on BumCode</title>
    <link>https://bumcode.kr/algorithm/ps/</link>
    <description>Recent content in PS on BumCode</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 11 Jan 2024 02:21:32 +0900</lastBuildDate><atom:link href="https://bumcode.kr/algorithm/ps/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>백준 1395 스위치 C&#43;&#43;</title>
      <link>https://bumcode.kr/algorithm/ps/1395/</link>
      <pubDate>Thu, 11 Jan 2024 02:21:32 +0900</pubDate>
      
      <guid>https://bumcode.kr/algorithm/ps/1395/</guid>
      <description>문제 풀러가기 이번에도 세그먼트 트리 문제다. 다만 그냥 세그먼트 트리를 사용할 경우, 구간 업데이트에 너무 많은 시간이 걸려 TLE 이므로 조금 다른 방식이 필요하다.
세그먼트 트리를 이용한 TLE코드 #include &amp;lt;bits/stdc++.h&amp;gt; using namespace std; int N, M; int seg[100&amp;#39;000 &amp;lt;&amp;lt; 2]; int update(int node, int s, int e, int a, int b) { if (b &amp;lt; s || e &amp;lt; a) return seg[node]; if (s == e) return seg[node] = 1 - seg[node]; int mid = (s + e) / 2; return seg[node] = update(node * 2, s, mid, a, b) + update(node * 2 + 1, mid + 1, e, a, b); } int query(int node, int s, int e, int a, int b) { if (b &amp;lt; s || e &amp;lt; a) return 0; if (a &amp;lt;= s &amp;amp;&amp;amp; e &amp;lt;= b) return seg[node]; int mid = (s + e) / 2; return query(node * 2, s, mid, a, b) + query(node * 2 + 1, mid + 1, e, a, b); } int main() { ios_base::sync_with_stdio(false); cin.</description>
    </item>
    
    <item>
      <title>백준 1725 히스토그램 C&#43;&#43;</title>
      <link>https://bumcode.kr/algorithm/ps/1725/</link>
      <pubDate>Mon, 08 Jan 2024 22:38:26 +0900</pubDate>
      
      <guid>https://bumcode.kr/algorithm/ps/1725/</guid>
      <description>문제 풀러가기 세그먼트 트리를 사용하는 문제이다.
어려워보이는 자료구조라 나중으로 미루다가 결국 하게되었는데.. 유튜브에 마음에 드는 강의가 딱히 없어서 그냥 요세푸스 문제2 해답코드를 여러개 뜯어보면서 공부했다.
요세푸스 문제나 구간합 문제 등 세그먼트 트리가 사용된 코드는 비슷한 부분이 많은 것 같은데 아직 완벽하게 이해하지는 못해서 몇 문제는 더 풀어보고 다뤄볼까 싶다.
init():세그먼트 트리 초기화
query():연산 수행
update():필요한 경우 트리 업데이트
위 세가지가 공통적으로 사용되고 동작방식도 비슷한 부분이 많다.
(문제 해설은 주석참고)
#include &amp;lt;bits/stdc++.</description>
    </item>
    
    <item>
      <title>백준 2252 줄 세우기 C&#43;&#43;</title>
      <link>https://bumcode.kr/algorithm/ps/2252/</link>
      <pubDate>Wed, 29 Nov 2023 22:13:46 +0900</pubDate>
      
      <guid>https://bumcode.kr/algorithm/ps/2252/</guid>
      <description>문제 풀러가기 위상정렬 을 이용하는 문제였다. 태그를 보고 풀었는데 위상정렬을 몰라 알고리즘만 보고 바로 풀어봤는데 입력을 어떻게 받을 지가 고민이었다.
정점 v1에서 연결되어있는 다른 정점으로의 간선의 개수를 진출차수라고 하며,
다른 정점에서 v1으로 연결되어있는 간선의 개수를 진입차수라고 한다.
위상정렬은 순서가 정해진 정점들의 순서를 구하는 알고리즘으로, 동작과정은 다음과 같다.
진입차수가 0인 정점을 모두 큐에 PUSH
큐에서 정점을 하나 POP하고 그 정점에서 진출하는 모든 간선을 제거한다.(연결 된 정점의 진입차수 1씩 감소)
제거 한 후, 진입차수가 0이 된 정점이 있다면, 큐에 PUSH</description>
    </item>
    
    <item>
      <title>백준 7677 Fibonacci C&#43;&#43;</title>
      <link>https://bumcode.kr/algorithm/ps/7677/</link>
      <pubDate>Sun, 05 Nov 2023 04:06:08 +0900</pubDate>
      
      <guid>https://bumcode.kr/algorithm/ps/7677/</guid>
      <description>문제 풀러가기 피보나치수를 구하는 문제였다.
다만 N의 최대가 1,000,000,000이라 예전에 dp로 풀었을 땐 시간초과가 났다.
이산수학에서 행렬을 배우고 다시 보니 풀 수 있을 것 같아서 다시 풀어봤다.
풀이 행렬의 거듭제곱을 이용해야한다. 다만, N번 곱한다면 시간복잡도가 O(N) 이기에 이문제는 풀 수 없다.
분할정복을 이용한 거듭제곱 알고리즘을 사용해 O(logN)으로 풀 수 있다. 분할정복을 이용한 거듭제곱
N이 짝수 A^N = A^(N/2) * A^(N/2)
N이 홀수 A^N = A^((N-1)/2) * A^((N-1)/2) * A
2*2라 그냥 2차원배열로 만들까 생각도 했지만 이번기회에 벡터사용에 익숙해지면 좋을 것 같아 벡터를 사용했다.</description>
    </item>
    
  </channel>
</rss>
