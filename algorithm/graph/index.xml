<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>graph algorithm on BumCode</title>
    <link>https://bumcode.kr/algorithm/graph/</link>
    <description>Recent content in graph algorithm on BumCode</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 24 Nov 2023 23:24:23 +0900</lastBuildDate><atom:link href="https://bumcode.kr/algorithm/graph/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Prim&#39;s algorithm</title>
      <link>https://bumcode.kr/algorithm/graph/prim/</link>
      <pubDate>Fri, 24 Nov 2023 23:24:23 +0900</pubDate>
      
      <guid>https://bumcode.kr/algorithm/graph/prim/</guid>
      <description>프림알고리즘은 최소신장트리, MST(minimum spanning tree)를 찾는 알고리즘이다. 최소신장트리 는 무향그래프의 모든 정점을 잇는 신장트리 중 그 가중치의 합이 최소인 그래프이다.
알고리즘은 다음과 같다.
(1) 시작할 정점을 선택한다. 아무 정점이나 선택해도 된다. (2) 선택한 정점에서 갈 수 있는 다른 정점 중 가장 가중치가 작은 정점을 선택해 잇는다. (3) 이어진 정점들에서 갈 수 있는 정점 중 가장 가중치가 작은 정점을 선택해 잇는다. (4) 모든 정점을 선택할 때 까지 (3)과정을 계속 반복 이어진 정점이라고 표기했는데 선택한 정점이 최소신장트리에 포함되는 것이며,</description>
    </item>
    
    <item>
      <title>Dijkstra&#39;s algorithm</title>
      <link>https://bumcode.kr/algorithm/graph/dijkstra/</link>
      <pubDate>Mon, 20 Nov 2023 16:05:08 +0900</pubDate>
      
      <guid>https://bumcode.kr/algorithm/graph/dijkstra/</guid>
      <description>다익스트라 알고리즘은 하나의 정점 에서 다른 모든 정점으로 가는 최단 경로 탐색 알고리즘이다.
알고리즘에 대한 자세한 설명은 건너뛰고 구현위주로 작성하겠다.
벡터 배열 우선순위 큐 C++로 다익스트라 구현하기 위해 위 3가지가 필요하다.
우선 정점의 개수가 N개라고 가정을 하자.
벡터는 다음과 같이 선언할 것이다. (1번 정점부터 N번 정점까지 저장해야하기에 N+1) vector&amp;lt;pair&amp;lt;int, int&amp;gt;&amp;gt; vertex[N+1]; vertex[i] : i번 정점
vertex[i]의 원소 :pair( i에서 갈 수 있는 다른 정점 , 그 정점까지의 가중치 )
예를 들어 다음 그래프에서 vertex[1]과 vertex[2]의 원소는 다음과 같다.</description>
    </item>
    
  </channel>
</rss>
